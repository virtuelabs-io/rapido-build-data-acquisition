service: DataAcquisition

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}

  logRetentionInDays: 7
#   tracing:
#     lambda: true
#     apiGateway: true
  logs:
    restApi: true
  vpc:
    securityGroupIds: ${file(./config/${self:provider.stage}.json):securityGroupIds}
    subnetIds: ${file(./config/${self:provider.stage}.json):subnetIds}
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - test/**
    - .git/**
    - .serverless/**
    - coverage/**
    - README.md
    - TODO.md
    - LICENSE

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

functions:
  ProductViewDataAcquisition:
    name: ProductViewDataAcquisition-${self:provider.stage}
    role: DataAcquisitionFunctionsLambdaRole
    module: ClickStream
    handler: product_viewed.fun
    memorySize: 128
    timeout: 10
    environment:
      DELIVERY_STREAM: rapido-data-acquisition-click-stream-${self:provider.stage}
    tags:
      purpose: lambda function to push Click stream data to the data lake
    # events:
    #   - http:
    #       path: /data-acquisition/product-view
    #       method: post
    #       integration: lambda
        #   cors:
        #     origins:
        #       - '*'
        #     headers:
        #       - Content-Type
        #       - Authorization


resources:
  Resources:
    DataAcquisitionFunctionsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
          - PolicyName: lambda
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
          - PolicyName: VPCAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
          - PolicyName: KenisisFirehoseAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "firehose:DescribeDeliveryStream"
                  - "firehose:ListDeliveryStreams"
                  - "firehose:PutRecord"
                  - "firehose:PutRecordBatch"
                Resource: "*"
    deliverystream:
      DependsOn:
        - deliveryPolicy
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: !Join
          - ''
          - - 'rapido-data-acquisition-click-stream-'
            - ${self:provider.stage}
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref s3bucket
          BufferingHints:
            SizeInMBs: '32'
            IntervalInSeconds: '900'
          CompressionFormat: UNCOMPRESSED
          Prefix: click-stream/
          RoleARN: !GetAtt deliveryRole.Arn
        #   ProcessingConfiguration:
        #     Enabled: 'true'
        #     Processors:
        #         - Parameters:
        #             - ParameterName: LambdaArn
        #               ParameterValue: !GetAtt myLambda.Arn
        #         Type: Lambda
    s3bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        BucketName: !Join
          - ''
          - - 'rapido-data-lake-'
            - ${self:provider.stage}
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 183
              Status: Enabled
        Tags:
          - Key: CostCenter
            Value: Rapidobuild
          - Key: Purpose
            Value: ClickStreamData
      DeletionPolicy: Retain
    deliveryRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: 'sts:AssumeRole'
              Condition:
                StringEquals:
                  'sts:ExternalId': !Ref 'AWS::AccountId'
    deliveryPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: firehose_delivery_policy
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref s3bucket
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref s3bucket
                    - '*'
        Roles:
          - !Ref deliveryRole
